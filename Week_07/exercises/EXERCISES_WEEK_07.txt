 _______   _______  ___________  _____ _____ _____ _____ _____ 
|  ___\ \ / /  __ \|  ___| ___ \/  __ \_   _/  ___|  ___/  ___|
| |__  \ V /| /  \/| |__ | |_/ /| /  \/ | | \ `--.| |__ \ `--. 
|  __| /   \| |    |  __||    / | |     | |  `--. \  __| `--. \
| |___/ /^\ \ \__/\| |___| |\ \ | \__/\_| |_/\__/ / |___/\__/ /
\____/\/   \/\____/\____/\_| \_| \____/\___/\____/\____/\____/ 

#----------------------------------------------------------------------
# Conditional statements, loops & loop control statements
#----------------------------------------------------------------------

1.) Run the Jupyter notebook 'conditional_statements_loops_Python.ipynb' step by step.

2.) In the Jupyter notebook section 'Practical examples using the cars data set', write
    a function with conditional statements and use the .apply() method from the pandas
    library to call the function and create a new variable 'Price_Category' with the 
    following price categories:
    - cheap (with prices < 25000)
    - normal (with prices >= 25000 & prices < 45000)
    - expensive (with prices >= 45000)

3.) In the Jupyter notebook section 'Practical examples using OpenStreetMap data'
    use a for loop to extract the following information from shops and write it 
    to a data frame:
    - addr:city
    - addr:country
    - addr:housenumber
    - addr:postcode
    - addr:street

    Note that not all data sets contain address information (see shops.geojson)
	
#----------------------------------------------------------------------
# Simulating the Monty Hall problem
#----------------------------------------------------------------------

1.) Run the Jupyter notebook 'simulation_monty_hall_problem.ipynb' step by step.

2.) In the Jupyter notebook, create a new section 'Proportion of wins in 
    relation to the number of trials'. In this section, create a line chart
    which shows the proportion of wins on the vertical axis and the number of 
    trials on the horizontal axis. For this, you can use the following code:

    # Create list to store number of trials using range(from, to, step width)
    list_iter = range(1, 100, 1)

    # Create list to store the proportion of wins
    list_wins = []

    # Foor loop
    for i in list_iter:
        
        # Simulations with switch = True and 3 doors
        list_wins.append(run_trials(i, True, ndoors=3) / i)

    # Show wins
    list_wins

    # Graphic
    plt.plot(list_iter, list_wins, color = 'green')
    plt.axhline(y = 0.66, color = 'gray', linestyle = '--')
    plt.title('Proportion of wins in relation to the number of trials')
    plt.xlabel('Number of trials')
    plt.ylabel('Wins (%)')
    plt.ylim([0, 1])
    plt.grid(linestyle='-', linewidth=0.1)
    plt.show()

3.) In the Python code above, change the number of trials to 5000 and the 
    step width to 5. Based on the line chart, answer the question, whether it 
    would make sense to change your initially choosen door after the gameshow 
    host reveals a goat behind one of the unchosen doors.
	
#----------------------------------------------------------------------
# Simulating a trading strategy
#----------------------------------------------------------------------

1.) Run the Jupyter notebook 'backtesting_trading_strategy.ipynb' step by step.

2.) Modify the values of:

    fixed_investment = 1000
    threshold_value = 0.05
    monthly_savings = 1000

3.) Look at the effect of these changes on the result.

4.) Which is the better trading strategy?

#----------------------------------------------------------------------
# Simulating a dice game
#----------------------------------------------------------------------

1.) The Python code below is a simulation of a dice game. Create a file
    dice_game.py containing the Python code. You can run the Python script in a 
    Terminal window by using the following command: python dice_game.py

    """Python code starts here"""

    import time
    import random

    # Trials
    for i in range(1, 100, 1):
        
        # Generates a random number from 1 and 6
        no = random.randint(1,6)
        
        if no == 1:
            print("┌─────────┐")
            print("│         │")
            print("│    ●    │")
            print("│         │")
            print("└─────────┘")
        if no == 2:
            print("┌─────────┐")
            print("│  ●      │")
            print("│         │")
            print("│      ●  │")
            print("└─────────┘")
        if no == 3:
            print("┌─────────┐")
            print("│  ●      │")
            print("│    ●    │")
            print("│      ●  │")
            print("└─────────┘")
        if no == 4:
            print("┌─────────┐")
            print("│  ●   ●  │")
            print("│         │")
            print("│  ●   ●  │")
            print("└─────────┘")
        if no == 5:
            print("┌─────────┐")
            print("│  ●   ●  │")
            print("│    ●    │")
            print("│  ●   ●  │")
            print("└─────────┘")
        if no == 6:
            print("┌─────────┐")
            print("│  ●   ●  │")
            print("│  ●   ●  │")
            print("│  ●   ●  │")
            print("└─────────┘")

        # Wait until the next trial
        time.sleep(0.25)

        """Python code ends here"""

2.) Extent the Python code above to save the results of each trial in a 
    list, then count the trials in which the numbers 1 to 6 occured. Use 
    the loop control statement 'break' to stop the dice game if the number '6' 
    occured 5 times. Below are the code lines which you can use.

    """Python code starts here"""

    import pandas as pd
    from collections import Counter

    # Initialize list to save results
    trials_list = []

    # Initialize counter of trials with the occurence of '6'
    no_six = 0

    # Trials
    for i in range(1, 1000, 1):

        if no == 1:
            print("┌─────────┐")
            print("│         │")
            print("│    ●    │")
            print("│         │")
            print("└─────────┘")

    # ...  

        if no == 6:
            print("┌─────────┐")
            print("│  ●   ●  │")
            print("│  ●   ●  │")
            print("│  ●   ●  │")
            print("└─────────┘")


        # Store results
        trials_list.append(no)

        # Count occurence of '6'
        if no == 6:
            no_six += 1

        # Break 
        if no_six >= 5:
            break
    
    # Analyse results
    out = dict(Counter(trials_list))
    print(pd.DataFrame.from_dict(out, 
                                columns=['Counts'], 
                                orient='index').sort_index())

    """Python code ends here"""
